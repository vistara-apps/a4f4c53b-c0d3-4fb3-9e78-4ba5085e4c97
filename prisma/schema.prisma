// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  userId            String   @id @unique
  farcasterId       String?  @unique
  username          String
  profilePictureUrl String?
  bio               String?
  skills            String   // JSON string of skills array
  rating            Float    @default(5.0)
  locationLat       Float
  locationLng       Float
  locationAddress   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  expertProfile     ExpertProfile?
  learnerSessions   Session[]        @relation("LearnerSessions")
  expertSessions    Session[]        @relation("ExpertSessions")
  notifications     Notification[]

  @@map("users")
}

model ExpertProfile {
  userId      String   @id
  expertise   String   // JSON string of expertise areas
  availability String  @default("offline") // "available", "busy", "offline"
  videoUrl    String?
  hourlyRate  Float    @default(50.0)
  rating      Float    @default(5.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  lessons     MicroLesson[]

  @@map("expert_profiles")
}

model MicroLesson {
  lessonId        String   @id @default(cuid())
  expertUserId    String
  title           String
  description     String
  durationMinutes Int      @default(3)
  type            String   @default("live") // "live", "recorded", "inperson"
  price           Float    @default(5.0)
  locationTag     String?
  isLive          Boolean  @default(false)
  recordingUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  expert          ExpertProfile @relation(fields: [expertUserId], references: [userId], onDelete: Cascade)
  sessions        Session[]

  @@map("micro_lessons")
}

model Session {
  sessionId     String   @id @default(cuid())
  lessonId      String
  learnerUserId String
  expertUserId  String
  startTime     DateTime
  endTime       DateTime?
  status        String   @default("pending") // "pending", "active", "completed", "cancelled"
  paymentStatus String   @default("pending") // "pending", "paid", "refunded"
  rating        Float?
  review        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  lesson         MicroLesson @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
  learner        User        @relation("LearnerSessions", fields: [learnerUserId], references: [userId], onDelete: Cascade)
  expert         User        @relation("ExpertSessions", fields: [expertUserId], references: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  notificationId String   @id @default(cuid())
  userId         String
  message        String
  timestamp      DateTime @default(now())
  readStatus     Boolean  @default(false)

  // Relations
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("notifications")
}
